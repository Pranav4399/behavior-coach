---
description: 
globs: 
alwaysApply: true
---
# Coding Standards and Best Practices

## Naming Conventions
- Use descriptive variable and function names
- camelCase for variables and functions
- PascalCase for components and classes

## File Structure
- Organize components in feature-based folders
- Prefer one component per file

## Code Quality
- Avoid using console.log in production code
  - Exceptions: console.error, console.warn
- Use const over let unless reassignment is required
- Avoid using `any` in TypeScript
  - Use proper type annotations or generics instead

## Documentation and Comments
- Write short, clear comments
  - Explain what and why, not how
  - Avoid long-winded explanations
- Use plain, everyday language
  - Prefer clarity over jargon or buzzwords
- Favor short to medium-length sentences
  - Ensure natural flow and logical structure

## React Best Practices
- Keep JSX readable
  - Extract logic-heavy JSX blocks into separate components or functions
- Follow the Rules of Hooks
  - Use hooks at the top level
  - Only use hooks inside React function components
- Break down components longer than 100 lines into smaller, reusable components

## Styling
- Use CSS Modules or CSS-in-JS libraries
  - Recommended: styled-components or TailwindCSS
  - Ensure scoped styling

## Error Handling
- Always handle errors in async functions
  - Use try/catch blocks
  - Or use .catch() method

## AI-First Development
- Before implementing new features:
  - Describe intent clearly in plain language
  - Allow AI to generate high-quality code based on clear descriptions

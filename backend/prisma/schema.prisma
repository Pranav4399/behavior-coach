// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for organization type
enum OrganizationType {
  client
  expert
}

model Organization {
  id              String          @id @default(uuid())
  name            String
  type            OrganizationType
  subscriptionTier String         @map("subscription_tier")
  logoUrl         String?         @map("logo_url")
  customTerminology Json?         @map("custom_terminology") // Stored as JSON
  settings        Json?           // Organization-specific settings
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  users           User[]
  roles           Role[]
  integrations    Integration[]

  @@map("organizations")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  password      String
  status        String?  @default("active")
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relation to Organization
  organizationId String?       @map("organization_id")
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  // Relation to Role
  roleId        String?       @map("role_id")
  role          Role?         @relation(fields: [roleId], references: [id])
  
  // Relation to UserPreferences
  preferences    UserPreferences?

  @@map("users")
}

model UserPreferences {
  id                  String   @id @default(uuid())
  userId              String   @unique @map("user_id")
  user                User     @relation(fields: [userId], references: [id])
  theme               String   @default("system")
  language            String   @default("en")
  emailNotifications  Boolean  @default(true) @map("email_notifications")
  pushNotifications   Boolean  @default(true) @map("push_notifications")
  timezone            String   @default("UTC")
  dateFormat          String   @default("YYYY-MM-DD") @map("date_format")
  customSettings      Json?    @map("custom_settings")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("user_preferences")
}

model Role {
  id              String       @id @default(uuid())
  name            String
  displayName     String       @map("display_name")
  description     String?      @default("")
  isDefault       Boolean      @default(false) @map("is_default")
  permissions     Json         // Stored as JSON array of permission strings
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  
  // Relation to Organization
  organizationId  String       @map("organization_id")
  organization    Organization @relation(fields: [organizationId], references: [id])

  // Relation to Users
  users          User[]

  @@map("roles")
}

model Integration {
  id            String       @id @default(uuid())
  type          String
  config        Json
  status        String      @default("inactive")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  // Relation to Organization
  organizationId String      @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("integrations")
}
